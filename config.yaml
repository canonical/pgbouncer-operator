# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

options:
  # Pgbouncer-specific settings - see https://www.pgbouncer.org/config.html
  # Generic Settings
  pool_mode:
    default: session
    description: |
      Specifies when a server connection can be reused by other clients. Can
      be one of the following values:

      session
      Server is released back to pool after client disconnects. Default.

      transaction
      Server is released back to pool after transaction finishes.

      statement
      Server is released back to pool after query finishes. Transactions
      spanning multiple statements are disallowed in this mode.
    type: string

  max_client_conn:
    default: 100
    description: |
      Maximum number of client connections allowed.

      When this setting is increased, then the file descriptor limits in the
      operating system might also have to be increased. Note that the number of
      file descriptors potentially used is more than max_client_conn. If each
      user connects under its own user name to the server, the theoretical
      maximum used is:

      max_client_conn + (max pool_size * total databases * total users)

      If a database user is specified in the connection string (all users
      connect under the same user name), the theoretical maximum is:

      max_client_conn + (max pool_size * total databases)

      The theoretical maximum should never be reached, unless somebody
      deliberately crafts a special load for it. Still, it means you should set
      the number of file descriptors to a safely high number.

      Search for ulimit in your favorite shell man page.
    type: int

  default_pool_size:
    default: 20
    description: |
      How many server connections to allow per user/database pair. Can be
      overridden in the per-database configuration.
    type: int

  min_pool_size:
    default: 0
    description: |
      Add more server connections to pool if below this number. Improves
      behavior when the normal load suddently comes back after a period of
      total inactivity. The value is effectively capped at the pool size. 0
      disables this minimum.
    type: int

  reserve_pool_size:
    default: 0
    description: |
      How many additional connections to allow to a pool (see
      reserve_pool_timeout). 0 disables.
    type: int

  reserve_pool_timeout:
    default: 5.0
    description: |
      If a client has not been serviced in this time, use additional
      connections from the reserve pool. 0 disables. [seconds]
    type: float

  max_db_connections:
    default: 0
    description: |
      Do not allow more than this many server connections per database
      (regardless of user). This considers the PgBouncer database that the
      client has connected to, not the PostgreSQL database of the outgoing
      connection.

      This can also be set per database in the [databases] section.

      Note that when you hit the limit, closing a client connection to one pool
      will not immediately allow a server connection to be established for
      another pool, because the server connection for the first pool is still
      open. Once the server connection closes (due to idle timeout), a new
      server connection will immediately be opened for the waiting pool.

      0 = unlimited
    type: int

  max_user_connections:
    default: 0
    description: |
      Do not allow more than this many server connections per user (regardless
      of database). This considers the PgBouncer user that is associated with a
      pool, which is either the user specified for the server connection or in
      absence of that the user the client has connected as.

      This can also be set per user in the [users] section.

      Note that when you hit the limit, closing a client connection to one pool
      will not immediately allow a server connection to be established for
      another pool, because the server connection for the first pool is still
      open. Once the server connection closes (due to idle timeout), a new
      server connection will immediately be opened for the waiting pool.

      0 = unlimited
    type: int

  disable_pqexec:
    default: 0
    description: |
      Disable the Simple Query protocol (PQexec). Unlike the Extended Query
      protocol, Simple Query allows multiple queries in one packet, which
      allows some classes of SQL-injection attacks. Disabling it can improve
      security. Obviously, this means only clients that exclusively use the
      Extended Query protocol will stay working.
    type: int

  # Authentication Settings
  auth_type:
    default: md5
    description: |
      How to authenticate users.

      cert
      Client must connect over TLS connection with a valid client certificate.
      The user name is then taken from the CommonName field from the
      certificate.

      md5
      Use MD5-based password check. This is the default authentication method.
      auth_file may contain both MD5-encrypted and plain-text passwords. If md5
      is configured and a user has a SCRAM secret, then SCRAM authentication is
      used automatically instead.

      scram-sha-256
      Use password check with SCRAM-SHA-256. auth_file has to contain SCRAM
      secrets or plain-text passwords.

      trust
      No authentication is done. The user name must still exist in auth_file.

      any
      Like the trust method, but the user name given is ignored. Requires that
      all databases are configured to log in as a specific user. Additionally,
      the console database allows any user to log in as admin.

      hba
      The actual authentication type is loaded from a file. This allows
      different authentication methods for different access paths, for example:
      connections over Unix socket use the peer auth method, connections over
      TCP must use TLS.

      pam
      PAM is used to authenticate users, auth_file is ignored. This method is
      not compatible with databases using the auth_user option. The service
      name reported to PAM is “pgbouncer”. pam is not supported in the HBA
      configuration file.
    type: string

  auth_user:
    description: |
      If auth_user is set, then any user not specified in auth_file will be
      queried through the auth_query query from pg_shadow in the database,
      using auth_user. The password of auth_user will be taken from auth_file.
      (If the auth_user does not require a password then it does not need to be
      defined in auth_file.)

      Direct access to pg_shadow requires admin rights. It’s preferable to use
      a non-superuser that calls a SECURITY DEFINER function instead.
    type: string

  # Log Settings
  log_level:
    default: normal
    description: |
      The level to which information is logged. Similar to the pgbouncer
      "verbose" option, but also handles connections, disconnections, pooler
      errors, and statistics. Controls the following pgbouncer options:
      "log_connections", "log_disconnections", "log_pooler_errors",
      "log_stats", "verbose".

      Levels:
      stats: verbose 0, and stats.
      normal: verbose 1, logs connection information and pooler errors.
      full: max verbose, logs connection information, pooler errors, and
      statistics.
    type: string

  # Console Access Control
  admin_users:
    default: juju-admin
    description: |
      A comma-separated list of admin users. A password will be generated for
      each user, which can be overridden using an action.

      Postgres admin users will be imported from the postgres charm
      automatically.
    type: string

  stats_users:
    default: cos
    description: |
      A comma-separated list of users that can access pgbouncer statistics. A
      password will be generated for each user. Only generates `cos` user by
      default, for use in the Canonical Observability Suite charm relation.
    type: string

  # Connection Sanity Checks, Timeouts
  server_reset_query_always:
    default: 0
    description: |
      Whether server_reset_query should be run in all pooling modes. When this
      setting is off (default), the server_reset_query will be run only in
      pools that are in sessions-pooling mode. Connections in
      transaction-pooling mode should not have any need for a reset query.

      This setting is for working around broken setups that run applications
      that use session features over a transaction-pooled PgBouncer. It changes
      non-deterministic breakage to deterministic breakage: Clients always lose
      their state after each transaction.
    type: int

  server_check_delay:
    default: 30.0
    description: |
      How long to keep released connections available for immediate re-use,
      without running server_check_query on it. If 0 then the check is always
      run.
    type: float

  server_fast_close:
    default: 0
    description: |
      Disconnect a server in session pooling mode immediately or after the end
      of the current transaction if it is in “close_needed” mode (set by
      RECONNECT, RELOAD that changes connection settings, or DNS change),
      rather than waiting for the session end. In statement or transaction
      pooling mode, this has no effect since that is the default behavior
      there.

      If because of this setting a server connection is closed before the end
      of the client session, the client connection is also closed. This ensures
      that the client notices that the session has been interrupted.

      This setting makes connection configuration changes take effect sooner if
      session pooling and long-running sessions are used. The downside is that
      client sessions  are liable to be interrupted by a configuration change,
      so client applications will need logic to reconnect and reestablish
      session state. But note that no transactions will be lost, because
      running transactions are not interrupted, only idle sessions.
    type: int

  server_idle_timeout:
    default: 600.0
    description: |
      If a server connection has been idle more than this many seconds it will
      be closed. If 0 then this timeout is disabled. [seconds]
    type: float

  server_connect_timeout:
    default: 15.0
    description: |
      If connection and login don’t finish in this amount of time, the
      connection will be closed. [seconds]
    type: float

  server_login_retry:
    default: 15.0
    description: |
      If login to the server failed, because of failure to connect or from
      authentication, the pooler waits this much before retrying to connect.
      During the waiting interval, new clients trying to connect to the failing
      server will get an error immediately without another connection attempt.
      [seconds]

      The purpose of this behavior is that clients don’t unnecessarily queue
      up waiting for a server connection to become available if the server is
      not working. However, it also means that if a server is momentarily
      failing, for example during a restart or if the configuration was
      erroneous, then it will take at least this long until the pooler will
      consider connecting to it again. Planned events such as restarts should
      normally be managed using the PAUSE command to avoid this.
    type: float

  client_login_timeout:
    default: 60.0
    description: |
      If a client connects but does not manage to log in in this amount of
      time, it will be disconnected. Mainly needed to avoid dead connections
      stalling SUSPEND and thus online restart. [seconds]
    type: float

  autodb_idle_timeout:
    default: 3600.0
    description: |
      If the automatically created (via “*”) database pools have been unused
      this many seconds, they are freed. The negative aspect of that is that
      their statistics are also forgotten. [seconds]
    type: float

  dns_max_ttl:
    default: 15.0
    description: |
      How long DNS lookups can be cached. The actual DNS TTL is ignored.
      [seconds]
    type: float

  dns_nxdomain_ttl:
    default: 15.0
    description: |
      How long DNS errors and NXDOMAIN DNS lookups can be cached. [seconds]
    type: float

  dns_zone_check_period:
    default: 0.0
    description: |
      Period to check if a zone serial has changed.

      PgBouncer can collect DNS zones from host names (everything after first
      dot) and then periodically check if the zone serial changes. If it
      notices changes, all host names under that zone are looked up again. If
      any host IP changes, its connections are invalidated.

      Works only with UDNS and c-ares backends (configure option --with-udns
      or --with-cares).
    type: float

  # TLS Settings
  client_tls_mode:
    default: disable
    description: |
      TLS mode to use for connections from clients. TLS connections are
      disabled by default. When enabled, client_tls_key_file and
      client_tls_cert_file must be also configured to set up the key and
      certificate PgBouncer uses to accept client connections.

      Analogous to client_tls_sslmode in pgbouncer config.

      disable
      Plain TCP. If client requests TLS, it’s ignored. Default.

      allow
      If client requests TLS, it is used. If not, plain TCP is used. If the
      client presents a client certificate, it is not validated.

      require
      Client must use TLS. If not, the client connection is rejected. If the
      client presents a client certificate, it is not validated.

      verify
      Client must use TLS with valid client certificate.
    type: string

  client_tls_key_file:
    description: Private key for PgBouncer to accept client connections.
    type: string

  client_tls_cert_file:
    description: Certificate for private key. Clients can validate it.
    type: string

  client_tls_ca_file:
    description: Root certificate file to validate client certificates.
    type: string

  server_tls_mode:
    default: disable
    description: |
      TLS mode to use for connections to PostgreSQL servers. TLS connections
      are disabled by default.

      Analogous to server_tls_sslmode in pgbouncer config.

      disable
      Plain TCP. TCP is not even requested from the server. Default.

      prefer
      TLS connection is always requested first from PostgreSQL. If refused, the
      connection will be established over plain TCP. Server certificate is not
      validated.

      require
      Connection must go over TLS. If server rejects it, plain TCP is not
      attempted. Server certificate is not validated.

      verify-ca
      Connection must go over TLS and server certificate must be valid
      according to server_tls_ca_file. Server host name is not checked against
      certificate.

      verify-full
      Connection must go over TLS and server certificate must be valid
      according to server_tls_ca_file. Server host name must match certificate
      information.
    type: string

  server_tls_key_file:
    description: Private key for PgBouncer to authenticate against PostgreSQL server.
    type: string

  server_tls_cert_file:
    description: Certificate for private key. PostgreSQL server can validate it.
    type: string

  server_tls_ca_file:
    description: Root certificate file to validate PostgreSQL server certificates.
    type: string

